@page "/jobPost"


@attribute [Authorize]

@inject AuthenticationStateProvider _authenticationStateProvider
@inject NavigationManager _navigationManager
@inject IJobPostRepository _jobPostRepository
@inject IJSRuntime _js

<_ConfirmationModal OnModalConfirmation="ConfirmDeleteJobPost"
                    Title="Are you sure you want to delete this jobPost?"
                    ButtonText="Delete"
                    BootstrapButtonClass="btn-danger">
</_ConfirmationModal>


@if (IsProcessing)
{
    <div class="loader">
        Loading jobPosts...
    </div>
}
else
{
    <div class="card shadow border-0 my-4">
        <_CardHeader HeaderText="JobPost List"></_CardHeader>

        <div class="card-body py-4">
            <div class="row pb-2">
                <div class="d-flex justify-content-between align-items-center mb-4">
                    <div >
                        Total JobPosts: <strong>@JobPosts.Count</strong>
                    </div>
                    <div>
                        <a href="jobPost/create" class="btn btn-lg btn-secondary responsive-btn">
                            <i class="bi bi-plus-square"></i>
                            Add new JobPost
                        </a>
                    </div>
                    
                </div>
                @if (JobPosts.Any())
                {
                    <table class="table table-bordered table-sjobPosted mt-3">
                        <thead>
                            <tr>
                                <th>Job Title</th>
                                <th>Company Name</th>
                                <th>Posted On</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var jobPost in JobPosts)
                            {
                                <tr>
                                    <td>@jobPost.JobTitle</td>
                                    <td>@jobPost.Company</td>
                                    <td>@jobPost.PostedOn</td>
                                    <td>
                                        <a href="@($"jobPost/update/{jobPost.Id}")" class="btn btn-primary btn-sm btn-action btn-gap">
                                            <i class="bi bi-pencil-square"></i><span class="hide-btn-text"> Edit</span>
                                        </a>
                                        <AuthorizeView Roles="@StaticDetails.RoleAdmin">
                                            <button class="btn btn-danger btn-sm btn-action" @onclick="() => HandleDelete(jobPost.Id)">
                                                <i class="bi bi-trash3-fill"></i>
                                                <span class="hide-btn-text"> Delete</span>
                                            </button>
                                        </AuthorizeView>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                }

            </div>
        </div>
    </div>
}



@code {
    private bool IsProcessing = true;
    private List<JobPost> JobPosts = new List<JobPost>();
    private int JobPostIdToDelete = 0;
    private bool isAdmin;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadJobPosts();
            IsProcessing = false;
            StateHasChanged();
        }
    }

    private async Task LoadJobPosts()
    {
        var authState = await _authenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;


        isAdmin = user.IsInRole(StaticDetails.RoleAdmin);

        if (isAdmin)
        {
            JobPosts = (await _jobPostRepository.GetAllAsync()).ToList();
        }
        else
        {
            var userName = user.Identity?.Name;
                       
            var jobPosts = await _jobPostRepository.GetAllAsync();

            JobPosts.AddRange(jobPosts);
        }


    }

    private async Task HandleDelete(int id)
    {
        JobPostIdToDelete = id;
        await _js.InvokeVoidAsync("ShowConfirmationModal");
    }

    private async Task ConfirmDeleteJobPost(bool isConfirmed)
    {
        IsProcessing = true;
        await _js.InvokeVoidAsync("HideConfirmationModal");


        if (isConfirmed && JobPostIdToDelete != 0)
        {
            var result = await _jobPostRepository.DeleteAsync(JobPostIdToDelete);
            if (result)
            {
                await _js.ToastrSuccess("JobPost deleted successfully");
            }
            else
            {
                await _js.ToastrError("Error encountered while deleting");
            }
            await LoadJobPosts();

        }
        JobPostIdToDelete = 0;
        IsProcessing = false;

    }


}
