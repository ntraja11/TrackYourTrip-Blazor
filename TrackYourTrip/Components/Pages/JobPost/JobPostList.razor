@page "/jobPost"

@implements IAsyncDisposable
@using Microsoft.AspNetCore.SignalR.Client


@inject AuthenticationStateProvider _authenticationStateProvider
@inject NavigationManager _navigationManager
@inject IJobPostRepository _jobPostRepository
@inject IJSRuntime _js

<_ConfirmationModal OnModalConfirmation="ConfirmDeleteJobPost"
                    Title="Are you sure you want to delete this jobPost?"
                    ButtonText="Delete"
                    BootstrapButtonClass="btn-danger">
</_ConfirmationModal>


@if (IsProcessing)
{
    <div class="loader">
        Loading jobPosts...
    </div>
}
else
{
    <div class="card shadow border-0 my-4">
        <_CardHeader HeaderText="JobPost List"></_CardHeader>

        <div class="card-body py-4">
            <div class="row pb-2">
                <div class="d-flex justify-content-between align-items-center mb-4">
                    <div >
                        Total Job Posts: <strong>@JobPosts.Count</strong>
                    </div>
                    <div>
                        <a href="jobPost/create" class="btn btn-lg btn-success responsive-btn">
                            <i class="bi bi-plus-square"></i>
                            Add new JobPost
                        </a>
                    </div>
                    
                </div>
                @if (JobPosts.Any())
                {
                    <RadzenDataGrid AllowFiltering="true"  
                            AllowColumnResize="true" AllowAlternatingRows="false" 
                            AllowSorting="true" AllowPaging="true" PageSize="10"
                            PagerHorizontalAlign="HorizontalAlign.Left" 
                            ShowPagingSummary="true" Data="@JobPosts" 
                            LogicalFilterOperator="LogicalFilterOperator.Or" 
                            SelectionMode="DataGridSelectionMode.Single" FilterMode="FilterMode.Simple"
                            FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive">
                        <Columns>
                            <RadzenDataGridColumn Property="JobTitle" Filterable="false" Title="Job Title">
                                <Template Context="jobPost">
                                    <RadzenText>@jobPost.JobTitle</RadzenText>
                                </Template>
                            </RadzenDataGridColumn>
                            <RadzenDataGridColumn Property="Company" Title="Company Name">
                                <Template Context="jobPost">
                                    <RadzenText >@jobPost.Company</RadzenText>
                                </Template>                                
                            </RadzenDataGridColumn>
                            <RadzenDataGridColumn Filterable="false" Property="PostedOn" Title="Posted On">
                                <Template Context="jobPost">
                                    <RadzenText>@jobPost.PostedOn</RadzenText>
                                </Template>
                            </RadzenDataGridColumn>
                            <RadzenDataGridColumn Title="Action" Sortable="false" Filterable="false" TextAlign="TextAlign.Center">
                                <Template Context="jobPost">
                                    <RadzenButton Shade="Shade.Light" ButtonStyle="ButtonStyle.Primary"
                                                  Text="Edit" Click="@(() => _navigationManager.NavigateTo($"jobPost/update/{jobPost.Id}"))">
                                            <RadzenIcon Icon="edit_square" />
                                    </RadzenButton>
                                    <AuthorizeView Roles="@StaticDetails.RoleAdmin">
                                        <RadzenButton Shade="Shade.Light" ButtonStyle="ButtonStyle.Danger"
                                                      Text="Delete" Click="@(() => HandleDelete(jobPost.Id))">
                                            <RadzenIcon Icon="delete" />
                                        </RadzenButton>
                                    </AuthorizeView>
                                </Template>
                            </RadzenDataGridColumn>
                        </Columns>
                    </RadzenDataGrid>
                }

            </div>
        </div>
    </div>
}



@code {
    private bool IsProcessing = true;
    private List<JobPost> JobPosts = new List<JobPost>();
    private int JobPostIdToDelete = 0;
    private bool isAdmin;
    private HubConnection _hubConnection;


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await InitHubConnection();
            IsProcessing = false;
            StateHasChanged();
        }
    }

    private async Task InitHubConnection()
    {
        _hubConnection = new HubConnectionBuilder()
        .WithUrl(_navigationManager.ToAbsoluteUri("/jobPostHub"))
        .Build();

        _hubConnection.On("JobPostsUpdated", async () =>
        {
            await InvokeAsync(async () =>
            {
                await LoadJobPosts();
                StateHasChanged();
            });
            
        });

        _hubConnection.Closed += async (error) =>
        {
            await Task.Delay(Random.Shared.Next(0, 5) * 1000);
            try
            {
                await _hubConnection.StartAsync();
            }
            catch(Exception ex)
            {
                Console.WriteLine($"----------- Error while connecting the hub ---------------  {ex.Message}");
            }
        };

        await _hubConnection.StartAsync();
        await LoadJobPosts();
    }

    public async ValueTask DisposeAsync()
    {
        if (_hubConnection is not null)
        {
            await _hubConnection.DisposeAsync();
        }
    }

    private async Task LoadJobPosts()
    {
        /*
        var authState = await _authenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;


        isAdmin = user.IsInRole(StaticDetails.RoleAdmin);
        */


        /*
        // if (isAdmin)
        // {
        //     JobPosts = (await _jobPostRepository.GetAllAsync()).ToList();
        // }
        // else
        // {
        //     var userName = user.Identity?.Name;
                       
        //     var jobPosts = await _jobPostRepository.GetAllAsync();

        //     JobPosts.AddRange(jobPosts);
        // }
        */

        JobPosts = (await _jobPostRepository.GetAllAsync()).ToList();


    }

    private async Task HandleDelete(int id)
    {
        JobPostIdToDelete = id;
        await _js.InvokeVoidAsync("ShowConfirmationModal");
    }

    private async Task ConfirmDeleteJobPost(bool isConfirmed)
    {
        IsProcessing = true;
        await _js.InvokeVoidAsync("HideConfirmationModal");


        if (isConfirmed && JobPostIdToDelete != 0)
        {
            var result = await _jobPostRepository.DeleteAsync(JobPostIdToDelete);
            if (result)
            {
                await _js.ToastrSuccess("JobPost deleted successfully");
            }
            else
            {
                await _js.ToastrError("Error encountered while deleting");
            }

        }
        JobPostIdToDelete = 0;
        IsProcessing = false;

    }


}
