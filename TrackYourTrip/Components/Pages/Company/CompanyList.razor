@page "/company"

@implements IAsyncDisposable
@using Microsoft.AspNetCore.SignalR.Client


@inject AuthenticationStateProvider _authenticationStateProvider
@inject NavigationManager _navigationManager
@inject ICompanyRepository _companyRepository
@inject IParticipantRepository _participantRepository
@inject IJSRuntime _js

<_ConfirmationModal OnModalConfirmation="ConfirmDeleteCompany"
                    Title="Are you sure you want to delete this company?"
                    ButtonText="Delete"
                    BootstrapButtonClass="btn-danger">
</_ConfirmationModal>


@if (IsProcessing)
{
    <div class="loader">
        Loading companies...
    </div>
}
else
{
    <div class="card shadow border-0 my-4">
        <_CardHeader HeaderText="Company List"></_CardHeader>

        <div class="card-body py-4">
            <div class="row pb-2">
                <div class="d-flex justify-content-between align-items-center mb-4">
                    <div >
                        Total Companies: <strong>@Companies.Count</strong>
                    </div>
                    <div>
                        <a href="company/create" class="btn btn-lg btn-primary responsive-btn">
                            <i class="bi bi-plus-square"></i>
                            Add new Company
                        </a>
                    </div>
                    
                </div>
                @if (Companies.Any())
                {
                    <table class="table table-bordered table-scompanyed mt-3">
                        <thead>
                            <tr>
                                <th>Name</th>
                                <th>Location</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var company in Companies)
                            {
                                <tr>
                                    <td>@company.Name</td>
                                    <td>@company.Location</td>
                                    <td>
                                        <a href="@($"company/update/{company.Id}")" class="btn btn-primary btn-sm btn-action btn-gap">
                                            <i class="bi bi-pencil-square"></i>@* <span class="hide-btn-text"> Edit</span> *@
                                        </a>
                                        <AuthorizeView Roles="@StaticDetails.RoleAdmin">
                                            <button class="btn btn-danger btn-sm btn-action" @onclick="() => HandleDelete(company.Id)">
                                                <i class="bi bi-trash3-fill"></i>
                                                @* <span class="hide-btn-text"> Delete</span> *@
                                            </button>
                                        </AuthorizeView>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                }

            </div>
        </div>
    </div>
}



@code {
    private bool IsProcessing = true;
    private List<Company> Companies = new List<Company>();
    private int CompanyIdToDelete = 0;
    private bool isAdmin;
    private HubConnection _hubConnection;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await InitHubConnection();
            IsProcessing = false;
            StateHasChanged();
        }
    }

    private async Task InitHubConnection()
    {
        _hubConnection = new HubConnectionBuilder()
        .WithUrl(_navigationManager.ToAbsoluteUri("/companyHub"))
        .Build();

        _hubConnection.On("CompaniesUpdated", async () =>
        {
            await InvokeAsync(async () =>
            {
                await LoadCompanies();
                StateHasChanged();
            });

        });

        _hubConnection.Closed += async (error) =>
        {
            await Task.Delay(Random.Shared.Next(0, 5) * 1000);
            try
            {
                await _hubConnection.StartAsync();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"----------- Error while connecting the hub ---------------  {ex.Message}");
            }
        };

        await _hubConnection.StartAsync();
        await LoadCompanies();
    }

    public async ValueTask DisposeAsync()
    {
        if (_hubConnection is not null)
        {
            await _hubConnection.DisposeAsync();
        }
    }

    private async Task LoadCompanies()
    {
        /*
        var authState = await _authenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;


        isAdmin = user.IsInRole(StaticDetails.RoleAdmin);
        */
        /*
        if (isAdmin)
        {
            Companies = (await _companyRepository.GetAllAsync()).ToList();
        }
        else
        {
            var userName = user.Identity?.Name;
                       
            var companies = await _companyRepository.GetAllAsync();

            Companies.AddRange(companies);
        }
        */

        Companies = (await _companyRepository.GetAllAsync()).ToList();


    }

    private async Task HandleDelete(int id)
    {
        CompanyIdToDelete = id;
        await _js.InvokeVoidAsync("ShowConfirmationModal");
    }

    private async Task ConfirmDeleteCompany(bool isConfirmed)
    {
        IsProcessing = true;
        await _js.InvokeVoidAsync("HideConfirmationModal");


        if (isConfirmed && CompanyIdToDelete != 0)
        {
            var result = await _companyRepository.DeleteAsync(CompanyIdToDelete);
            if (result)
            {
                await _js.ToastrSuccess("Company deleted successfully");
            }
            else
            {
                await _js.ToastrError("Error encountered while deleting");
            }

        }
        CompanyIdToDelete = 0;
        IsProcessing = false;

    }


}
