@page "/trip-radzen"


@attribute [Authorize]

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager _navigationManager
@inject ITripRepository _tripRepository
@inject IParticipantRepository _participantRepository
@inject IJSRuntime _js

<ConfirmationModal OnModalConfirmation="ConfirmDeleteTrip"
Title="Are you sure you want to delete this trip?"
ButtonText="Delete"
BootstrapButtonClass="btn-danger">
</ConfirmationModal>


@if (IsProcessing)
{
    <div class="loader">
        Loading trips...
    </div>
}
else
{
    <div class="card shadow border-0 mt-4">
        <div class="card-header bg-black bg-gradient ml-0 py-3">
            <div class="row">
                <div class="col-12 text-center">
                    <h2 class="text-white py-2">Trip List</h2>
                </div>
            </div>
        </div>
        <div class="card-body py-4">
            <div class="row pb-2">
                <div class="col-12 text-end mb-4">
                    <a href="trip/create" class="btn btn-lg btn-secondary" style="width:250px;">
                        <i class="bi bi-plus-square"></i>
                        Add new Trip
                    </a>
                </div>
                @if (Trips.Any())
                {
                    <RadzenDataGrid AllowFiltering="true" AllowColumnResize="true" AllowAlternatingRows="false" FilterMode="FilterMode.Advanced" AllowSorting="true" PageSize="3" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
                                    Data="@Trips" LogicalFilterOperator="LogicalFilterOperator.Or" SelectionMode="DataGridSelectionMode.Single">
                        <Columns>
                            <RadzenDataGridColumn Property="Name" Title="Name" Frozen="true">
                                <Template Context="trip">
                                    <RadzenLink Text="@trip.Name" Path="@($"trip/details/{trip.Id}")" />
                                </Template>
                            </RadzenDataGridColumn>

                            <RadzenDataGridColumn Property="StartDate" Title="Start Date" Frozen="true" />
                            <RadzenDataGridColumn Property="Status" Title="Status" />
                            <RadzenDataGridColumn Title="Action" Frozen="true" Sortable="false" Filterable="false" TextAlign="TextAlign.Center">
                                <Template Context="trip">
                                    <RadzenButton Shade="Shade.Light" ButtonStyle="ButtonStyle.Primary"
                                                  Text="Edit" Click="@(() => _navigationManager.NavigateTo($"trip/update/{trip.Id}"))">
                                    </RadzenButton>
                                    <AuthorizeView Roles="@StaticDetails.RoleAdmin">
                                        <RadzenButton Shade="Shade.Light" ButtonStyle="ButtonStyle.Danger"
                                                      Text="Delete" Click="@(() => HandleDelete(trip.Id))">
                                        </RadzenButton>
                                    </AuthorizeView>
                                </Template>
                            </RadzenDataGridColumn>
                        </Columns>
                    </RadzenDataGrid>
                }

            </div>
        </div>
    </div>
}



@code {
    private bool IsProcessing = true;
    private List<Trip> Trips = new List<Trip>();
    private int TripIdToDelete = 0;
    private bool isAdmin;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadTrips();
            IsProcessing = false;
            StateHasChanged();
        }
    }

    private async Task LoadTrips()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        

        isAdmin = user.IsInRole(StaticDetails.RoleAdmin);

        if (isAdmin)
        {
            Trips = (await _tripRepository.GetAllAsync()).ToList();
        }
        else
        {
            var userName = user.Identity?.Name;
            var participants = await _participantRepository.GetAllAsync(p => p.Name == userName);
            var trips = participants.Select(p => p.TripId).ToList();
            foreach (var tripId in trips)
            {
                Trips.AddRange(await _tripRepository.GetAllAsync(t => t.Id == tripId));
            }
        }

        
    }

    private async Task HandleDelete(int id)
    {
        TripIdToDelete = id;
        await _js.InvokeVoidAsync("ShowConfirmationModal");
    }

    private async Task ConfirmDeleteTrip(bool isConfirmed)
    {
        IsProcessing = true;
        await _js.InvokeVoidAsync("HideConfirmationModal");


        if(isConfirmed && TripIdToDelete != 0)
        {
            var result = await _tripRepository.DeleteAsync(TripIdToDelete);
            if(result)
            {
                await _js.ToastrSuccess("Trip deleted successfully");
            }
            else
            {
                await _js.ToastrError("Error encountered while deleting");
            }
            await LoadTrips();
            
        }
        TripIdToDelete = 0;
        IsProcessing = false;
        
    }


}
