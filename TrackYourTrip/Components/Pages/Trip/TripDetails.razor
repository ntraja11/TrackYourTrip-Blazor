@page "/trip/details/{tripId:int}"

@inject ITripRepository _tripRepository
@inject IExpenseRepository _expenseRepository
@inject IParticipantRepository _participantRepository


@if (IsProcessing)
{
    <div class="loader">
        Loading trip...
    </div>
}
else
{
    <div class="card shadow border-0 mt-4">
        <div class="card-header bg-black bg-gradient ml-0 py-3">
            <div class="row">
                <div class="col-12 text-center">
                    <h2 class="text-white py-2">Trip Details</h2>
                </div>
            </div>
        </div>
        <div class="card-body py-4">
            <div class="row pb-2">
                <div class="col-6 text-start mb-2">
                    <a href="@($"trip/{TripId}/add-participant")" class="btn btn-lg btn-primary" style="width:250px;">
                        <i class="bi bi-person-plus-fill"></i>
                        Manage Participants
                    </a>
                    <a href="@($"trip/{TripId}/add-expense")" class="btn btn-lg btn-primary" style="width:250px;">
                        <i class="bi bi-person-plus-fill"></i>
                        Add Expense
                    </a>
                </div>
                <div class="col-6 text-end mb-2">
                    <a href="trip" class="btn btn-lg btn-secondary" style="width:250px;">
                        <i class="bi bi-arrow-left-square"></i>
                        Back to Trip List
                    </a>
                </div>               
            </div>

            <table class="table table-bordered">
                <tr>
                    <th>Name</th>
                    <td>@Trip.Name</td>
                </tr>
                <tr>
                    <th>From</th>
                    <td>@Trip.From</td>
                </tr>
                <tr>
                    <th>To</th>
                    <td>@Trip.To</td>
                </tr>
                <tr>
                    <th>Start Date</th>
                    <td>@Trip.StartDate?.ToString("yyyy-MM-dd")</td>
                </tr>
                <tr>
                    <th>End Date</th>
                    <td>@Trip.EndDate?.ToString("yyyy-MM-dd")</td>
                </tr>
                <tr>
                    <th>Total Expense</th>
                    <td>@Trip.TotalExpense</td>
                </tr>
                <tr>
                    <th>Status</th>
                    <td>@Trip.Status</td>
                </tr>
                <tr>
                    <th>Vehicle</th>
                    <td>@Trip.Vehicle!.Name</td>
                </tr>
            </table>

            @if (Trip.ParticipantList is not null && Trip.ParticipantList.Any())
            {
                <table class="table table-bordered table-striped mt-5">
                    <thead>
                        <tr>
                            <th scope="col">Name</th>
                            <th scope="col">Total expense</th>
                            <th scope="col">Share Difference (Single share = @SingleParticipantShare)</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var participant in TripParticipantList)
                        {
                            var differenceFromAverage = participant.TotalTripExpense - SingleParticipantShare;
                            <tr>
                                <td>@participant.Name</td>
                                <td>@participant.TotalTripExpense</td>
                                <td><span class="@(differenceFromAverage > 0 ? "text-success" : "text-danger fw-bold")">@differenceFromAverage.ToString("F2")</span></td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
            else
            {
                <p>No participants have been added to this trip yet.</p>
            }


            @if (Trip.ExpenseList is not null && Trip.ExpenseList.Any())
            {
                <table class="table table-bordered table-striped mt-5">
                    <thead>
                        <tr>
                            <th scope="col">Name</th>
                            <th scope="col">Amount</th>
                            <th scope="col">Participant</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var expense in TripExpenseList)
                        {
                            <tr>
                                <td><a href="@($"trip/{TripId}/add-expense/{expense.Id}")">@expense.Name</a></td>
                                <td>@expense.Amount</td>
                                <td>@expense.Participant!.Name</td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
            else
            {
                <p>No expense have been added to this trip yet.</p>
            }

        </div>
    </div>
}



@code {

    private bool IsProcessing = true;
    [Parameter]
    public int TripId { get; set; }

    private Trip Trip { get; set; } = new Trip();

    private IEnumerable<Participant> TripParticipantList = new List<Participant>();
    private IEnumerable<Expense> TripExpenseList = new List<Expense>();

    private decimal SingleParticipantShare = 0;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadTrip();
            IsProcessing = false;
            StateHasChanged();
        }
    }

    private async Task LoadTrip()
    {
        if (TripId > 0)
        {
            Trip = await _tripRepository.GetAsync(TripId);
            TripParticipantList = await _participantRepository.GetAllAsync(p => p.TripId == TripId);
            TripExpenseList = await _expenseRepository.GetAllAsync(p => p.TripId == TripId);
            Trip.ParticipantList = TripParticipantList;
            Trip.ExpenseList = TripExpenseList;

            CalculateTripCost();
        }
    }

    private void CalculateTripCost()
    {
        Trip.TotalExpense = 0;
        foreach (var participant in TripParticipantList)
        {
            participant.TotalTripExpense = TripExpenseList.Where(e => e.ParticipantId == participant.Id).Sum(e => e.Amount);
            Trip.TotalExpense += participant.TotalTripExpense;
        }

        SingleParticipantShare = Trip.TotalExpense / TripParticipantList.Count();
            
    }

}
